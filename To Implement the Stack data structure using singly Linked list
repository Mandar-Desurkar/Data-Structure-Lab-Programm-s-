#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

struct node* top = NULL; // Initially stack is empty

// Function to check if stack is empty
int isEmpty() {
    if (top == NULL) {
        return 1;
    }
    return 0;
}

// Function to add an element to the top of the stack
void push(int element) {
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = element;
    new_node->next = top;
    top = new_node;
    printf("%d has been pushed to the stack.\n", element);
}

// Function to remove the top element from the stack
void pop() {
    if (isEmpty()) {
        printf("Stack is empty. Cannot pop element.\n");
    } else {
        struct node* temp = top;
        top = top->next;
        printf("%d has been popped from the stack.\n", temp->data);
        free(temp);
    }
}

// Function to display the elements of the stack
void display() {
    if (isEmpty()) {
        printf("Stack is empty. Cannot display elements.\n");
    } else {
        struct node* temp = top;
        printf("Elements of the stack are: ");
        while (temp != NULL) {
            printf("%d ", temp->data);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    int choice, element;
    while (1) {
        printf("\n1. Push an element to the stack\n");
        printf("2. Pop an element from the stack\n");
        printf("3. Display the elements of the stack\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &element);
                push(element);
                break;
            case 2:
                pop();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice. Please enter a valid choice.\n");
        }
    }
    return 0;
}
